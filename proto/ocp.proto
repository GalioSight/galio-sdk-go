// Observability Control Protocol：可观测控制协议。
// 注意：ocp 协议需要保持绝对兼容，因为 SDK 依赖于 ocp 协议，并且发布出去的 SDK 版本很能保证全部升级。
// 所以不能删除字段，不能修改字段类型，即使是冗余字段，也不能删除。
syntax = "proto3";
package model;

import "gogoproto/gogo.proto";

option go_package = "model";
option java_package = "com.tencent.galileo.proto";
option (gogoproto.goproto_sizecache_all) = false;
option (gogoproto.goproto_unkeyed_all) = false;
option (gogoproto.goproto_unrecognized_all) = false;

// TelemetryData 数据类型。
enum TelemetryData {
  TELEMETRY_DATA_INVALID = 0;
  TELEMETRY_DATA_METRICS = 1;
  TELEMETRY_DATA_LOGS = 2;
  TELEMETRY_DATA_TRACES = 3;
  TELEMETRY_DATA_PROFILES = 4;
}

// DataProtocol 数据协议。
enum DataProtocol {
  DATA_PROTOCOL_INVALID = 0;
  DATA_PROTOCOL_OTLP = 1;
  DATA_PROTOCOL_PROMETHEUS = 2;
  DATA_PROTOCOL_JAEGER = 3;
  DATA_PROTOCOL_M007 = 4;
  DATA_PROTOCOL_OTP = 5;
}

// DataTransmission 数据传输方式。
enum DataTransmission {
  DATA_TRANSMISSION_INVALID = 0;
  DATA_TRANSMISSION_HTTP = 1;
  DATA_TRANSMISSION_gRPC = 2;
  DATA_TRANSMISSION_tRPC = 3;
}

// MetricsSampleType 指标采样方式。
enum MetricsSampleType {
  METRICS_SAMPLE_TYPE_INVALID = 0;
  METRICS_SAMPLE_TYPE_RAND = 1;
  METRICS_SAMPLE_TYPE_ROWS = 2;
}

// Collector 数据收集服务器信息。
message Collector {
  // collector 地址，通常是 ias 域名代理服务地址。
  string addr = 1;
  // TelemetryData 数据类型
  TelemetryData telemetry_data = 2;
  // DataProtocol 数据协议
  DataProtocol data_protocol = 3;
  // DataTransmission 数据传输方式
  DataTransmission data_transmission = 4;
  // 版本号，默认 0
  int32 version = 5;
  // DirectIpPort 直连 ip:port。
  // 当网络畅通，可以直连时，上报数据可以不经过域名代理服务，以减轻 ias 的压力。
  // 同时也可以减少对外部系统的依赖，避免 ias 故障时，监控受影响。
  repeated string direct_ip_port = 6;
}

// 枚举接入点
enum AccessPoint {
  ACCESS_POINT_INVALID = 0; // 非法值
  ACCESS_POINT_SG_PUBLIC = 1; // 新加坡外网
  ACCESS_POINT_SG_PRIVATE = 2; // 新加坡公司内网
  ACCESS_POINT_CN_PUBLIC = 3; // 中国大陆外网
  ACCESS_POINT_CN_PRIVATE = 4; // 中国大陆内网
}

// GetConfigRequest 一般观测对象配置请求。
// 请求 Post /ocp/api/v1/get_config
// target 是 omp 和 ocp 的核心概念之一，任何观测数据，都必须绑定到一个 target
// 上。target 是观测对象的唯一标识 ID，必须全局唯一，target
// 相同，就认为是同一个对象。target
// 必须全局唯一，为了避免冲突，格式上分为两部分，用点分割。
// 第一部分是平台（platform），第二部分是平台内的对象名称（object_name）。
// 第一个点之前的部分，是 platform，如 PCG-123，不同平台的 platform 是不同的。
// 第一个点之后的部分，是 object_name，如 galileo.metaserver。
// target = platform . object_name
message GetConfigRequest {
  // 观测对象所在的平台，如 PCG-123, STKE
  string platform = 1;
  // 观测对象名，需要在$platform 下唯一，如 m007.metadata
  string object_name = 2;
  // SDK 支持的 metrics 协议
  CollectorProtocol metrics = 3 [(gogoproto.nullable) = false];
  // SDK 支持的 traces 协议
  CollectorProtocol traces = 4 [(gogoproto.nullable) = false];
  // SDK 支持的 logs 协议
  CollectorProtocol logs = 5 [(gogoproto.nullable) = false];
  // 环境，一般不需要填
  string env = 6;
  // set 部署时的 set 名，一般不需要填
  string set = 7;
  // Resource 资源对象，里面的字段是可选的，在能取到的情况下需要传到 OCP 服务。
  Resource resource = 8 [(gogoproto.nullable) = false];
  // SDK 支持的 profiles 协议
  CollectorProtocol profiles = 9 [(gogoproto.nullable) = false];
  // 上传本地配置（可选）
  GetConfigResponse local = 10;
}

// CollectorProtocol SDK 支持的协议。
message CollectorProtocol {
  // 数据类型，如 TELEMETRY_DATA_METRICS
  TelemetryData telemetry_data = 2;
  // 数据协议，如 DATA_PROTOCOL_OTP
  DataProtocol data_protocol = 3;
  // 数据传输方式，如 DATA_TRANSMISSION_HTTP
  DataTransmission data_transmission = 4;
  // 版本号，默认 0
  int32 version = 5;
}

// GetConfigResponse 一般观测对象配置响应。
message GetConfigResponse {
  // 返回码
  int32 code = 1;
  // 返回信息
  string msg = 2;
  // 观测目标，=$platform.$object_name, 与请求参数对应，主要用于调试
  string target = 3;
  // config server 地址，用于 schema 上报，新版本已经不再使用
  string config_server = 4;
  // register server 地址，为 v0.1.x 版本设计 prometheus 注册地址，现在 v0.1 版本已经无人使用
  string register_server = 5;
  // 自监控配置
  SelfMonitor self_monitor = 6 [(gogoproto.nullable) = false];
  // 指标相关配置。
  MetricsConfig metrics_config = 7 [(gogoproto.nullable) = false];
  // 追踪相关配置。
  TracesConfig traces_config = 8 [(gogoproto.nullable) = false];
  // 日志相关配置。
  LogsConfig logs_config = 9 [(gogoproto.nullable) = false];
  // tenant_id 租户 id，由后台自动分配。现在 traces 和 logs 依赖于正确的租户 id
  // 才能写入数据。
  string tenant_id = 10;
  // version 服务配置，默认 0，0：本地配置优先，1：远程配置优先。
  int32 version = 11;
  // 性能相关配置。
  ProfilesConfig profiles_config = 12 [(gogoproto.nullable) = false];
  // 接入点
  AccessPoint access_point = 13;
  // prometheus push 配置
  PrometheusPushConfig prometheus_push = 14 [(gogoproto.nullable) = false];
  // OpenTelemetry push 配置
  OpenTelemetryPushConfig opentelemetry_push = 15 [(gogoproto.nullable) = false];
}

// SelfMonitor 自监控配置。
message SelfMonitor {
  string protocol = 1; // 如：otp。
  // CollectorAddr 自监控数据收集地址，和数据的收集地址会做集群上的隔离。
  Collector collector = 2 [(gogoproto.nullable) = false];
  // 自监控数据的上报间隔
  int32 report_seconds = 3;
}

// MetricsConfig 指标相关配置。
message MetricsConfig {
  // 是否启用
  bool enable = 1;
  // processor 数据处理相关配置。
  MetricsProcessor processor = 3 [(gogoproto.nullable) = false];
  // 数据导出（上报）相关配置。
  MetricsExporter exporter = 4 [(gogoproto.nullable) = false];
  // 是否启用 sse
  bool enable_sse = 5;
}

// LabelIgnore 标签屏蔽。
message LabelIgnore {
  // MonitorName 屏蔽指标名。
  string monitor_name = 1;
  // LabelNames 屏蔽标签列表。
  repeated string label_names = 2;
}

// SecondGranularity 秒级监控。
message SecondGranularity {
  // MonitorName 监控项名。
  string monitor_name = 1;
  // BeginSecond 开始时间戳（秒级）。
  int64 begin_second = 2;
  // EndSecond 结束时间戳（秒级）。
  int64 end_second = 3;
  // WindowSeconds 秒级监控聚合窗口，单位秒，默认 1 秒。
  int32 window_seconds = 4;
  // TtlSeconds 秒级数据的过期时间，单位：秒。如：3600（1 小时）
  int64 ttl_seconds = 5;
}

// SampleMonitor 采样监控配置。
message SampleMonitor {
  // MonitorName 监控项名。
  string monitor_name = 1;
  // SamplerType 采样类型。
  MetricsSampleType sample_type = 2;
  // Fraction 采样率。
  double fraction = 3;
}

// RPCHasTwoIP 主被调监控有 "两个 ip" 配置。
// 主被调监控，"两个 ip" 举例：
// ip1、ip2、请求数 1
// ip1、ip3、请求数 2
// ip4、ip2、请求数 2
// ip4、ip3、请求数 1
// ip5、ip2、请求数 1
// ip5、ip3、请求数 2
// 主被调监控，"一个 ip" 举例：
// ip1、-、请求数 (只有主调) 3
// ip4、-、请求数 (只有主调) 3
// ip5、-、请求数 (只有主调) 3
// -、ip2、请求数 (只有被调) 4
// -、ip3、请求数 (只有被调) 5
// 因此当 ip 数较多的情况，"一个 ip" 能起到数据降维的作用，但是 "一个 ip" 无法同时查询两个 ip。
message RPCHasTwoIP {
  // MonitorName 监控项名。
  string monitor_name = 1;
  // BeginSecond 开始时间戳（秒级）。
  int64 begin_second = 2;
  // EndSecond 结束时间戳（秒级）。
  int64 end_second = 3;
}

// MetricsProcessor 监控处理器配置。
message MetricsProcessor {
  // Protocol 监控处理器协议，表明使用者需要的协议。
  // 系统允许实现不同协议的监控处理器并注册，这个字段用来查找工厂（见：Factories），如：omp。
  string protocol = 1;
  // WindowSeconds 表示数据多久聚合一次，单位秒。
  // 上报数据时的时间窗口大小，数据在此时间窗口内会被发送完毕，默认 10 秒。
  int32 window_seconds = 2;
  // ClearSeconds 表示数据多久清理一次，单位秒。
  // 默认 3600 秒。
  int32 clear_seconds = 3;
  // ExpiresSeconds 表示数据（多值点）过期时间，单位秒（如：1
  // 个主调监控维度组合，是一个多值点）。默认 3600 秒。
  int64 expires_seconds = 4;
  // PointLimit 表示数据（单值点）限制（如：1 个主调监控维度组合的 请求量 +
  // 完成量 + 耗时 是 3 个单值点）。默认 1000000。
  int64 point_limit = 5;
  // EnableProcessMetrics 是否开启进程监控 (process_*,go_*) 上报，默认 false。
  bool enable_process_metrics = 6;
  // ProcessMetricsSeconds 进程监控上报周期，单位秒。默认 20 秒。
  int64 process_metrics_seconds = 7;
  // HistogramBuckets 直方图分桶
  repeated HistogramBucket histogram_buckets = 8 [(gogoproto.nullable) = false];
  // LabelIgnores 标签屏蔽。
  repeated LabelIgnore label_ignores = 9 [(gogoproto.nullable) = false];
  // RetCodeAsException 返回码是否当成异常
  bool ret_code_as_exception = 10;
  // SecondGranularitys 秒级监控配置。
  repeated SecondGranularity second_granularitys = 11 [(gogoproto.nullable) = false];
  // SampleMonitors 监控项采样配置。
  repeated SampleMonitor sample_monitors = 12 [(gogoproto.nullable) = false];
  // RpcHasTwoIps 主被调监控有 "两个 ip" 配置。
  repeated RPCHasTwoIP rpc_has_two_ips = 13 [(gogoproto.nullable) = false];
}

// MetricsExporter 监控导出器配置。
message MetricsExporter {
  string protocol = 1; // 如：otp。
  // collector 服务端
  Collector collector = 2 [(gogoproto.nullable) = false];
  // 上报线程数量，默认 10。
  int32 thread_count = 3;
  // 数据发送缓冲区大小，缓冲区满了之后，继续导出数据会阻塞住。
  // 通常此数值要设置得比较大，足够容纳几秒内的全部数据，避免阻塞。
  // 正常情况发，数据消费会比生产快，缓冲区是不会满的。
  // 数据发送缓冲区大小，默认 10000
  int32 buffer_size = 4;
  // 分页上报时，每页上报的数量，默认 1000
  int32 page_size = 5;
  // 上报数据时的 timeout，默认 2000 ms。
  int32 timeout_ms = 6;
  // WindowSeconds 表示数据多久聚合一次，单位秒。
  // 上报数据时的时间窗口大小，数据在此时间窗口内会被发送完毕，默认 10 秒。
  int32 window_seconds = 7;
  // 最大重试次数
  int32 max_retry_count = 8;
  // 是否导出到文件，此开关在调试及自动化测试中会比较有用，默认 false。
  bool export_to_file = 9;
}

// PrometheusPushConfig prometheus 上报配置
message PrometheusPushConfig {
  // 是否启用 Prometheus 推送配置
  bool enable = 1;
  // Prometheus 推送的目标 URL，参考：
  string url = 2;
  // Prometheus 推送任务的名称
  string job = 3;
  // 推送间隔时间，单位为秒，默认 20 秒，如果需要秒级监控，可以改成 1 秒。间隔越小，成本越高。
  int32 interval = 4;
  // 是否使用基本认证
  bool use_basic_auth = 5;
  // 认证的用户名
  string username = 6;
  // 认证的密码
  string password = 7;
  // 分组信息，键值对形式
  map<string, string> grouping = 8;
  // HTTP 头信息，键值对形式
  map<string, string> http_headers = 9;
}

// OpenTelemetryPushConfig OpenTelemetry 上报配置
message OpenTelemetryPushConfig {
  // 是否启用 OpenTelemetry 推送配置
  bool enable = 1;
  // OpenTelemetry 推送的目标 URL，参考：和：Traces、Logs 使用相同地址。
  string url = 2;
}

// HistogramBucket 直方图分桶
message HistogramBucket {
  // name：指标名
  string name = 1;
  // buckets：递增桶，如：{0, 0.1, 0.2, 0.5}
  repeated double buckets = 2;
}

// TracesConfig 追踪相关配置。
message TracesConfig {
  // 是否启用
  bool enable = 1;
  // processor 数据处理相关配置。
  TracesProcessor processor = 3 [(gogoproto.nullable) = false];
  // 数据导出（上报）相关配置。
  TracesExporter exporter = 4 [(gogoproto.nullable) = false];
  // 是否启用 sse
  bool enable_sse = 5;
}

message TracesProcessor {
  // 如：omp。
  string protocol = 1;
  // 采样器配置
  SamplerConfig sampler = 3 [(gogoproto.nullable) = false];
  // 若为 true，则关闭 trace 中对 req 和 rsp 的上报，可以提高上报性能。默认
  // true。
  bool disable_trace_body = 4;
  // 若为 true，则关闭 流式调用中 trace 中对 req 和 rsp 的上报，可以提高上报性能。默认
  // true。
  bool disable_stream_trace_body = 11;
  // EnableDeferredSample 是否开启延迟采样，默认 false。
  bool enable_deferred_sample = 5;
  // DeferredSampleError 延迟采样 - 出错采样，默认 false。
  bool deferred_sample_error = 6;
  // DeferredSampleSlowDuration 延迟采样 - 慢操作采样，慢操作阈值，单位 ms，默认
  // 0。
  int64 deferred_sample_slow_duration_ms = 7;
  // DisableParentSampling 忽略上游的采样结果，默认 false。
  bool disable_parent_sampling = 8;
  // Workflow 采样配置，用户不可见，仅由服务端下发
  WorkflowSamplerConfig workflow_sampler = 9 [(gogoproto.nullable) = false];
  // 开启 trace 与 profile 的关联，需要同时配置 profiles_config -> enable: true
  // 才可生效。
  bool enable_profile = 10;
}

message TracesExporter {
  // protocol 如：otlp。
  string protocol = 1;
  // collector 服务端信息
  Collector collector = 2 [(gogoproto.nullable) = false];
  // 数据发送缓冲区大小，缓冲区满了之后，继续导出数据会阻塞住。
  // 通常此数值要设置得比较大，足够容纳几秒内的全部数据，避免阻塞。
  // 正常情况发，数据消费会比生产快，缓冲区是不会满的。
  // 数据发送缓冲区大小，默认 10000
  int32 buffer_size = 4;
  // 分页上报时，每页上报的数量，默认 1000
  int32 page_size = 5;
  // WindowSeconds 表示数据多久聚合一次，单位秒。
  // 上报数据时的时间窗口大小，数据在此时间窗口内会被发送完毕，默认 10 秒。
  int32 window_seconds = 7;
  // 每个数据包大小，超过此大小时一定发送
  int32 packet_size = 8;
  // 是否导出到文件，此开关在调试及自动化测试中会比较有用，默认 false。
  bool export_to_file = 9;
}

// LogsConfig 日志相关配置。
message LogsConfig {
  // 是否启用
  bool enable = 1;
  // processor 数据处理相关配置。
  LogsProcessor processor = 3 [(gogoproto.nullable) = false];
  // 数据导出（上报）相关配置。
  LogsExporter exporter = 4 [(gogoproto.nullable) = false];
}

// LogsProcessor 日志处理器配置。
message LogsProcessor {
  // 采样器配置已经移除了。
  reserved 3;
  // 如：omp。
  string protocol = 1;
  // OnlyTraceLog 只输出 trace 的 log。默认 false，即输出全部 log。
  bool only_trace_log = 2;
  // 日志格式，0,1,2,3，默认 0
  int32 trace_log_mode = 4;
  // debug, info, error，默认 error
  string level = 5;
  // 是否捕获 panic，默认 true
  bool enable_recovery = 6;
  // 是否只要命中 trace 的日志不分级别都上报。默认 false
  bool must_log_traced = 7;
  // dyeing|sample 命中染色还是命中采样
  string log_traced_type = 8;
}

// LogsExporter 日志导出器配置。
message LogsExporter {
  string protocol = 1; // 如：otlp。
  // collector 服务端信息
  Collector collector = 2 [(gogoproto.nullable) = false];
  // 数据发送缓冲区大小，缓冲区满了之后，继续导出数据会阻塞住。
  // 通常此数值要设置得比较大，足够容纳几秒内的全部数据，避免阻塞。
  // 正常情况发，数据消费会比生产快，缓冲区是不会满的。
  // 数据发送缓冲区大小，默认 10000
  int32 buffer_size = 4;
  // 分页上报时，每页上报的数量，默认 1000
  int32 page_size = 5;
  // WindowSeconds 表示数据多久聚合一次，单位秒。
  // 上报数据时的时间窗口大小，数据在此时间窗口内会被发送完毕，默认 10 秒。
  int32 window_seconds = 7;
  // 每个数据包大小，超过此大小时一定发送
  int32 packet_size = 8;
  // 是否导出到文件，此开关在调试及自动化测试中会比较有用，默认 false。
  bool export_to_file = 9;
}

message ProfilesConfig {
  // 是否启用
  bool enable = 1;
  // processor 数据额处理相关配置
  ProfilesProcessor processor = 3 [(gogoproto.nullable) = false];
  // 数据导出（上报）相关配置
  ProfilesExporter exporter = 4 [(gogoproto.nullable) = false];
}

message ProfilesProcessor {
  // Protocol 监控处理器协议，表明使用者需要的协议。
  // 系统允许实现不同协议的监控处理器并注册，这个字段用来查找工厂（见：Factories），如：omp。
  string protocol = 1;
  // 采集的性能数据类型，支持 CPU、heap、mutex、block、goroutine，默认开启 CPU
  // 和 heap。
  repeated string profile_types = 3;
  // 采集周期，单位 s，默认 60s，即采集 60s 上传一次。
  int64 period_seconds = 4;
  // 每一个采集周期内，CPU profile 采集的时长，默认与 period_seconds 等长，即
  // 60s。
  int64 cpu_duration_seconds = 5;
  // CPU profile 采样频率（Hz），即每秒采集多少 CPU Profile
  // samples，一般不需要设置。默认为 100 Hz（最佳实践），即 on-cpu 时间 > 10ms
  // 的调用可以被采到，建议不要超过 500 Hz，参考
  // https://github.com/golang/go/blob/go1.18/src/runtime/pprof/pprof.go#L763-L771。
  // 设置 rate 为非 100 的值，会打印，
  // warning "runtime: cannot set CPU profile rate until previous profile has
  // finished"，可忽略该 warning，详细原因请参考
  // 0：关闭 CPU profiling
  int32 cpu_profile_rate = 6;
  // mutex 锁竞争采样频率，默认 10。
  // rate = 1：采样所有的 mutex event
  // rate > 1：随机采样 1/rate 的 mutex event
  int32 mutex_profile_fraction = 7;
  // 阻塞事件采样频率，默认 100000000，即 100ms。
  // rate <= 0：关闭 block profiling
  // rate = 1：采样所有的 block event
  // rate > 1：阻塞时间 t > rate（nanoseconds）的 event 一定会被统计，t < rate
  // 则有 t/rate 的概率被采样。
  int32 block_profile_rate = 8;
  // 是否开启 delta profile 增量收集 profile 数据，目前 heap、block、mutex
  // 支持增量收集，默认是 true。
  bool enable_delta_profiles = 9;
  // 是否开启 profile 关联 trace，默认是 false。
  bool enable_link_trace = 10;
}

message ProfilesExporter {
  reserved 3, 5, 7;
  reserved "thread_count", "page_size", "window_seconds";
  string protocol = 1; // 如：pprof
  // collector 服务端信息
  Collector collector = 2 [(gogoproto.nullable) = false];
  // 数据发送缓冲区大小，即 PofilesBatch 的个数，默认 5。
  int32 buffer_size = 4;
  // 上报数据时的 timeout，默认 2000 ms。
  int32 timeout_ms = 6;
  // 最大重试次数
  int32 max_retry_count = 8;
  // 是否导出到文件，此开关在调试及自动化测试中会比较有用，默认 false。
  bool export_to_file = 9;
}

// SamplerConfig sampler config
message SamplerConfig {
  // Enable 是否采样，默认开启
  bool enable = 1;
  // Fraction 一般采样率，默认 0
  double fraction = 2;
  // ErrorFraction 出错时采样率，默认 0
  double error_fraction = 3;
  // Dyeing 染色元数据。
  repeated Dyeing dyeing = 4 [(gogoproto.nullable) = false];
  // EnableDyeing，是否开启染色，默认 true。
  bool enable_dyeing = 5;
  // 每分钟最小采样数，group by (caller_method,
  // callee_method)。此字段已经废弃，等 v0.5.0 删除。
  // int32 min_sample_count = 6;
  // WindowInterval 统计时间窗口大小（秒）, 默认 60 秒。此字段已经废弃，等
  // v0.5.0 删除。
  // int32 window_interval = 7;
  // WindowMaxKeyCount
  // 最大组合数，限制内存使用量，避免内存爆炸。此字段已经废弃，等 v0.5.0 删除。
  // int32 window_max_key_count = 8;
  // 是否开启最小采样，默认 false。
  bool enable_min_sample = 9;
  // 是否开启布隆过滤器染色，默认 false，由 ocp 服务控制。
  bool enable_bloom_dyeing = 10;
  // 布隆过滤器染色元数据。
  repeated BloomDyeing bloom_dyeing = 11 [(gogoproto.nullable) = false];
  // 过载保护配置
  repeated TokenBucketConfig rate_limit = 12;
  // 被调采样配置。
  RpcSamplingConfig server = 13 [(gogoproto.nullable) = false];
  // 主调采样配置。
  RpcSamplingConfig client = 14 [(gogoproto.nullable) = false];
}

// WorkflowSamplerConfig 默认采样配置
message WorkflowSamplerConfig {
  // 每分钟基准采样数
  int32 sample_count_per_minute = 1;
  // 每分钟熔断最大限制
  int32 max_count_per_minute = 2;
  // path 算法全局 cache 大小
  int32 path_max_count = 3;
  // path 算法 cache 生存周期，单位秒
  int32 lifetime_sec = 4;
}

// TokenBucketConfig 限速配置
message TokenBucketConfig {
  // strategy: root 采样策略名 (default|dyeing|random|min_count)
  string strategy = 1;
  // 单位时间（默认秒）平均限制数
  uint64 rate = 2;
  // 单位时间（默认秒）突发限制数
  uint64 burst = 3;
}

message Dyeing {
  // 染色的 key
  string key = 1;
  // 染色的 values
  repeated string values = 2;
}

// Resource 资源信息，在 SDK 运行期间不会改变。
// 各个字段详细定义见：https://galiosight.ai/galio-sdk-go/proto/omp.yaml
message Resource {
  // Target 观测对象的唯一标识 ID，需要全局唯一，如：PCG-123.galileo.metaserver
  string target = 1;
  // Namespace 物理环境，如：Development
  string namespace = 2;
  // EnvName 用户环境，如：test
  string env_name = 3;
  // Region 地域，如：sz
  string region = 4;
  // Instance 实例，如：10.20.30.40
  string instance = 5;
  // Node 节点，如：cls-as9z3nec-be39e3191ce2086271cf0679c0c0f5fc-2
  string node = 6;
  // ContainerName 容器，如：test.galileo.metaserver.sz100012
  string container_name = 7;
  // Version 伽利略 SDK 的版本号。
  string version = 8;
  // Platform 服务部署的平台，如 PCG-123
  string platform = 9;
  // ObjectName 观测对象名。
  string object_name = 10;
  // App 业务名，如 galileo。
  string app = 11;
  // Server 服务名，如 metaserver。
  string server = 12;
  // SetName 分 set 时的 set 名，如 set.sz.1
  string set_name = 13;
  // FrameCode 框架代号，如 trpc
  string frame_code = 14;
  // ServiceName 服务默认 ServiceName，由 ClientFilter
  // 传递给下游，用于修复主调方没有正确传递主调服务名的场景。通常是点分 4
  // 段格式，如 trpc.galileo.metaserver.Service。
  string service_name = 15;
  // TenantID 租户 ID。
  string tenant_id = 16;
  // CmdbID cmdb ID。
  string cmdb_id = 17;
  // TargetType 观测对象类型
  int32 target_type = 18;
  //  Language 开发语言
  string language = 20;
  // SdkName SDK 名
  string sdk_name = 21;
  // City 服务器所在城市
  string city = 22;
  // Admin 端口
  uint32 admin_port = 23;
  // 发布版本，每次发布变更都应该有不同的版本，可以使用镜像版本、commit id 等来表示，此字段用于 CD 发布时，对比不同版本的指标数据
  string release_version = 24;
}

// 指标 Schema 定义
message MetricSchema {
  // 监控项
  string monitor_name = 1;
  // 指标名
  string metric_name = 2;
  // 指标类型
  string metric_type = 3;
  // 指标聚合方式
  string aggregation = 4;
  // 指标别名
  string metric_alias = 5;
  // 指标描述
  string metric_desc = 6;
  // 标签列表
  repeated string labels = 7;
  // Usage 指标用法 (sum,count,max,min)。
  string usage = 8;
}

// 日志 Schema 定义
message LogSchema {
  // 日志名
  string log_name = 1;
  // 标签列表
  repeated string labels = 7;
}

// 追踪 Schema 定义
message TraceSchema {
  // 标签列表
  repeated string labels = 7;
}

// Profile Schema 定义
message ProfileSchema {
  // profile 类型
  string profile_type = 1;
  // 标签列表
  repeated string labels = 7;
}

// TelemetrySchemaRequest 上报观测数据 schema 的请求。
// 请求 POST /ocp/api/v1/telemetry_schema
// 通常是聚合一段时间后，定时上报。
// Schema 未发生变化的情况下，不需要上报。
message TelemetrySchemaRequest {
  // 资源
  Resource resource = 1 [(gogoproto.nullable) = false];
  // 请求序列号，每次进程启动后，从 0 开始自增
  uint64 serial_number = 2;
  // 指标 Schema 定义
  repeated MetricSchema metric_schemas = 3 [(gogoproto.nullable) = false];
  // 追踪 Schema 定义
  repeated TraceSchema trace_schemas = 4 [(gogoproto.nullable) = false];
  // 日志 Schema 定义
  repeated LogSchema log_schemas = 5 [(gogoproto.nullable) = false];
  // Profile Schema 定义
  repeated ProfileSchema profile_schemas = 6 [(gogoproto.nullable) = false];
}

// TelemetrySchemaResponse 上报观测数据 schema 的回包。
message TelemetrySchemaResponse {
  // 返回码
  int32 code = 1;
  // 返回信息
  string msg = 2;
}

message BloomDyeing {
  // 染色的 key
  string key = 1;
  // 布隆过滤器大小
  int32 bit_size = 2;
  // 布隆过滤器哈希函数数量
  int32 hash_number = 3;
  // 布隆过滤器 bitmap 数据
  repeated int64 bitmap = 4;
}

// RpcSamplingConfig 主被调采样配置。
message RpcSamplingConfig {
  // 采样率，默认 -1，此时继承 SamplerConfig.fraction。设置成 0 即可关闭随机采样。
  double fraction = 1;
  // 接口级采样配置。
  repeated RpcConfig rpc = 2 [(gogoproto.nullable) = false];
}

// RpcConfig 主被调接口级采样配置。
message RpcConfig {
  // 接口名称。
  string name = 1;
  // 采样率，默认 -1，此时继承 SamplerConfig.RpcSamplingConfig.fraction。设置成 0 即可关闭随机采样。
  double fraction = 2;
}
