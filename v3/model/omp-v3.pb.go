// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: omp-v3.proto

package model

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type RPCLabels_FieldName int32

const (
	RPCLabels_rpc_caller_service   RPCLabels_FieldName = 0
	RPCLabels_rpc_caller_method    RPCLabels_FieldName = 1
	RPCLabels_rpc_caller_set       RPCLabels_FieldName = 2
	RPCLabels_rpc_caller_ip        RPCLabels_FieldName = 3
	RPCLabels_rpc_caller_container RPCLabels_FieldName = 4
	RPCLabels_rpc_callee_service   RPCLabels_FieldName = 5
	RPCLabels_rpc_callee_method    RPCLabels_FieldName = 6
	RPCLabels_rpc_callee_set       RPCLabels_FieldName = 7
	RPCLabels_rpc_callee_ip        RPCLabels_FieldName = 8
	RPCLabels_rpc_callee_container RPCLabels_FieldName = 9
	RPCLabels_rpc_error_code       RPCLabels_FieldName = 10
	RPCLabels_rpc_error_code_type  RPCLabels_FieldName = 11
	RPCLabels_rpc_caller_group     RPCLabels_FieldName = 13
	RPCLabels_rpc_user_ext1        RPCLabels_FieldName = 14
	RPCLabels_rpc_user_ext2        RPCLabels_FieldName = 15
	RPCLabels_rpc_user_ext3        RPCLabels_FieldName = 16
	RPCLabels_rpc_caller_server    RPCLabels_FieldName = 18
	RPCLabels_rpc_callee_server    RPCLabels_FieldName = 20
	RPCLabels_rpc_canary           RPCLabels_FieldName = 21
	RPCLabels_rpc_flow_tag         RPCLabels_FieldName = 22
	RPCLabels_max_field            RPCLabels_FieldName = 23
)

var RPCLabels_FieldName_name = map[int32]string{
	0:  "rpc_caller_service",
	1:  "rpc_caller_method",
	2:  "rpc_caller_set",
	3:  "rpc_caller_ip",
	4:  "rpc_caller_container",
	5:  "rpc_callee_service",
	6:  "rpc_callee_method",
	7:  "rpc_callee_set",
	8:  "rpc_callee_ip",
	9:  "rpc_callee_container",
	10: "rpc_error_code",
	11: "rpc_error_code_type",
	13: "rpc_caller_group",
	14: "rpc_user_ext1",
	15: "rpc_user_ext2",
	16: "rpc_user_ext3",
	18: "rpc_caller_server",
	20: "rpc_callee_server",
	21: "rpc_canary",
	22: "rpc_flow_tag",
	23: "max_field",
}

var RPCLabels_FieldName_value = map[string]int32{
	"rpc_caller_service":   0,
	"rpc_caller_method":    1,
	"rpc_caller_set":       2,
	"rpc_caller_ip":        3,
	"rpc_caller_container": 4,
	"rpc_callee_service":   5,
	"rpc_callee_method":    6,
	"rpc_callee_set":       7,
	"rpc_callee_ip":        8,
	"rpc_callee_container": 9,
	"rpc_error_code":       10,
	"rpc_error_code_type":  11,
	"rpc_caller_group":     13,
	"rpc_user_ext1":        14,
	"rpc_user_ext2":        15,
	"rpc_user_ext3":        16,
	"rpc_caller_server":    18,
	"rpc_callee_server":    20,
	"rpc_canary":           21,
	"rpc_flow_tag":         22,
	"max_field":            23,
}

func (x RPCLabels_FieldName) String() string {
	return proto.EnumName(RPCLabels_FieldName_name, int32(x))
}

func (RPCLabels_FieldName) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4731746404606107, []int{0, 0}
}

type RPCLabels struct {
}

func (m *RPCLabels) Reset()         { *m = RPCLabels{} }
func (m *RPCLabels) String() string { return proto.CompactTextString(m) }
func (*RPCLabels) ProtoMessage()    {}
func (*RPCLabels) Descriptor() ([]byte, []int) {
	return fileDescriptor_4731746404606107, []int{0}
}
func (m *RPCLabels) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RPCLabels) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RPCLabels.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RPCLabels) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RPCLabels.Merge(m, src)
}
func (m *RPCLabels) XXX_Size() int {
	return m.Size()
}
func (m *RPCLabels) XXX_DiscardUnknown() {
	xxx_messageInfo_RPCLabels.DiscardUnknown(m)
}

var xxx_messageInfo_RPCLabels proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("model.v3.RPCLabels_FieldName", RPCLabels_FieldName_name, RPCLabels_FieldName_value)
	proto.RegisterType((*RPCLabels)(nil), "model.v3.RPCLabels")
}

func init() { proto.RegisterFile("omp-v3.proto", fileDescriptor_4731746404606107) }

var fileDescriptor_4731746404606107 = []byte{
	// 346 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x92, 0x41, 0x4f, 0xea, 0x40,
	0x10, 0xc7, 0xdb, 0xc7, 0x83, 0x47, 0xe7, 0x01, 0x0e, 0x6b, 0x01, 0xf5, 0xd0, 0x03, 0x77, 0x6b,
	0xb4, 0x37, 0x8f, 0x9a, 0x78, 0x32, 0xc6, 0x78, 0xf4, 0xd2, 0x2c, 0xed, 0x50, 0x9b, 0x6c, 0xbb,
	0xcd, 0xb2, 0x20, 0x7c, 0x0b, 0x3f, 0x95, 0xf1, 0xc8, 0xc1, 0x83, 0x47, 0x03, 0x5f, 0xc4, 0xb4,
	0x80, 0x69, 0x7b, 0xdb, 0xf9, 0xed, 0x66, 0x7f, 0x33, 0xbb, 0x7f, 0xe8, 0xc8, 0x24, 0x3b, 0x5f,
	0x78, 0x6e, 0xa6, 0xa4, 0x96, 0xac, 0x9d, 0xc8, 0x90, 0x84, 0xbb, 0xf0, 0xce, 0xec, 0x48, 0x46,
	0xb2, 0x80, 0x17, 0xf9, 0x6a, 0xb7, 0x3f, 0xfe, 0x6c, 0x80, 0xf5, 0xf4, 0x78, 0x7b, 0xcf, 0x27,
	0x24, 0x66, 0xe3, 0xf7, 0x06, 0x58, 0x77, 0x31, 0x89, 0xf0, 0x81, 0x27, 0xc4, 0x86, 0xc0, 0x54,
	0x16, 0xf8, 0x01, 0x17, 0x82, 0x94, 0x3f, 0x23, 0xb5, 0x88, 0x03, 0x42, 0x83, 0x0d, 0xa0, 0x5f,
	0xe2, 0x09, 0xe9, 0x17, 0x19, 0xa2, 0xc9, 0x18, 0xf4, 0x2a, 0xc7, 0x35, 0xfe, 0x61, 0x7d, 0xe8,
	0x96, 0x58, 0x9c, 0x61, 0x83, 0x9d, 0x80, 0x5d, 0x42, 0x81, 0x4c, 0x35, 0x8f, 0x53, 0x52, 0xf8,
	0xb7, 0xe2, 0xa3, 0x5f, 0x5f, 0xb3, 0xe2, 0xa3, 0x83, 0xaf, 0x55, 0xf1, 0x51, 0xe1, 0xfb, 0x57,
	0xf1, 0x51, 0xee, 0x6b, 0x57, 0x7c, 0x54, 0xf2, 0x59, 0x87, 0x0b, 0x48, 0x29, 0x99, 0x37, 0x12,
	0x12, 0x02, 0x1b, 0xc1, 0x71, 0x95, 0xf9, 0x7a, 0x95, 0x11, 0xfe, 0x67, 0x36, 0x60, 0xa9, 0xed,
	0x48, 0xc9, 0x79, 0x86, 0xdd, 0x83, 0x6f, 0x3e, 0x23, 0xe5, 0xd3, 0x52, 0x5f, 0x62, 0xaf, 0x8e,
	0xae, 0xf0, 0xa8, 0x8e, 0x3c, 0xc4, 0xda, 0x1b, 0xe6, 0xb3, 0x92, 0x42, 0x56, 0x1b, 0x75, 0x8f,
	0x6d, 0xd6, 0x03, 0xd8, 0xe1, 0x94, 0xab, 0x15, 0x0e, 0x18, 0x42, 0x27, 0xaf, 0xa7, 0x42, 0xbe,
	0xfa, 0x9a, 0x47, 0x38, 0x64, 0x5d, 0xb0, 0x12, 0xbe, 0xf4, 0xa7, 0xf9, 0xe7, 0xe1, 0xe8, 0xe6,
	0xfa, 0x63, 0xe3, 0x98, 0xeb, 0x8d, 0x63, 0x7e, 0x6f, 0x1c, 0xf3, 0x6d, 0xeb, 0x18, 0xeb, 0xad,
	0x63, 0x7c, 0x6d, 0x1d, 0x03, 0x4e, 0x03, 0x99, 0xb8, 0x9a, 0xd2, 0x80, 0x52, 0xed, 0x46, 0x5c,
	0xc4, 0x82, 0xf6, 0x59, 0x78, 0x6e, 0x16, 0x59, 0x99, 0xb4, 0x8a, 0xca, 0xfb, 0x09, 0x00, 0x00,
	0xff, 0xff, 0xa5, 0x04, 0x63, 0xff, 0x49, 0x02, 0x00, 0x00,
}

func (m *RPCLabels) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RPCLabels) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RPCLabels) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintOmpV3(dAtA []byte, offset int, v uint64) int {
	offset -= sovOmpV3(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RPCLabels) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovOmpV3(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozOmpV3(x uint64) (n int) {
	return sovOmpV3(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RPCLabels) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOmpV3
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RPCLabels: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RPCLabels: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipOmpV3(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOmpV3
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipOmpV3(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowOmpV3
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOmpV3
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOmpV3
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthOmpV3
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupOmpV3
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthOmpV3
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthOmpV3        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowOmpV3          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupOmpV3 = fmt.Errorf("proto: unexpected end of group")
)
