// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: omp.proto

package model

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Aggregation 指标聚合方式。
type Aggregation int32

const (
	Aggregation_AGGREGATION_NONE      Aggregation = 0
	Aggregation_AGGREGATION_SET       Aggregation = 1
	Aggregation_AGGREGATION_SUM       Aggregation = 2
	Aggregation_AGGREGATION_AVG       Aggregation = 3
	Aggregation_AGGREGATION_MAX       Aggregation = 4
	Aggregation_AGGREGATION_MIN       Aggregation = 5
	Aggregation_AGGREGATION_HISTOGRAM Aggregation = 6
	Aggregation_AGGREGATION_COUNTER   Aggregation = 7
	// Deprecated: 仅限伽利略内部兼容 prometheus 用，其他任何地方不能使用此类型，请使用 AGGREGATION_HISTOGRAM
	Aggregation_AGGREGATION_PROMETHEUS_HISTOGRAM Aggregation = 8
	// Deprecated: 仅限伽利略内部兼容 prometheus 用，其他任何地方不能使用此类型，请使用 AGGREGATION_COUNTER
	Aggregation_AGGREGATION_PROMETHEUS_COUNTER Aggregation = 9
	Aggregation_MAX_AGGREGATION                Aggregation = 10
)

var Aggregation_name = map[int32]string{
	0:  "AGGREGATION_NONE",
	1:  "AGGREGATION_SET",
	2:  "AGGREGATION_SUM",
	3:  "AGGREGATION_AVG",
	4:  "AGGREGATION_MAX",
	5:  "AGGREGATION_MIN",
	6:  "AGGREGATION_HISTOGRAM",
	7:  "AGGREGATION_COUNTER",
	8:  "AGGREGATION_PROMETHEUS_HISTOGRAM",
	9:  "AGGREGATION_PROMETHEUS_COUNTER",
	10: "MAX_AGGREGATION",
}

var Aggregation_value = map[string]int32{
	"AGGREGATION_NONE":                 0,
	"AGGREGATION_SET":                  1,
	"AGGREGATION_SUM":                  2,
	"AGGREGATION_AVG":                  3,
	"AGGREGATION_MAX":                  4,
	"AGGREGATION_MIN":                  5,
	"AGGREGATION_HISTOGRAM":            6,
	"AGGREGATION_COUNTER":              7,
	"AGGREGATION_PROMETHEUS_HISTOGRAM": 8,
	"AGGREGATION_PROMETHEUS_COUNTER":   9,
	"MAX_AGGREGATION":                  10,
}

func (x Aggregation) String() string {
	return proto.EnumName(Aggregation_name, int32(x))
}

func (Aggregation) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_67943c9084134dd5, []int{0}
}

type ClientMetrics_MetricName int32

const (
	// 注意，字段名希望能保持原始名字，方便反射使用，所以枚举时不使用通常的命名规范。
	// 此处使用枚举，方便遍历，写代码时相对方便，减少重复代码。
	ClientMetrics_rpc_client_started_total ClientMetrics_MetricName = 0
	ClientMetrics_rpc_client_handled_total ClientMetrics_MetricName = 1
	// 客户端（主调方上报）处理完成时耗时分布，单位：秒。
	ClientMetrics_rpc_client_handled_seconds     ClientMetrics_MetricName = 2
	ClientMetrics_rpc_client_metrics_point_count ClientMetrics_MetricName = 3
)

var ClientMetrics_MetricName_name = map[int32]string{
	0: "rpc_client_started_total",
	1: "rpc_client_handled_total",
	2: "rpc_client_handled_seconds",
	3: "rpc_client_metrics_point_count",
}

var ClientMetrics_MetricName_value = map[string]int32{
	"rpc_client_started_total":       0,
	"rpc_client_handled_total":       1,
	"rpc_client_handled_seconds":     2,
	"rpc_client_metrics_point_count": 3,
}

func (x ClientMetrics_MetricName) String() string {
	return proto.EnumName(ClientMetrics_MetricName_name, int32(x))
}

func (ClientMetrics_MetricName) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_67943c9084134dd5, []int{0, 0}
}

type ServerMetrics_MetricName int32

const (
	// 注意，字段名希望能保持原始名字，方便反射使用，所以枚举时不使用通常的命名规范。
	// 此处使用枚举，方便遍历，写代码时相对方便，减少重复代码。
	ServerMetrics_rpc_server_started_total ServerMetrics_MetricName = 0
	ServerMetrics_rpc_server_handled_total ServerMetrics_MetricName = 1
	// 服务端（被调方上报）处理完成的耗时分布，单位：秒。
	ServerMetrics_rpc_server_handled_seconds     ServerMetrics_MetricName = 2
	ServerMetrics_rpc_server_metrics_point_count ServerMetrics_MetricName = 3
)

var ServerMetrics_MetricName_name = map[int32]string{
	0: "rpc_server_started_total",
	1: "rpc_server_handled_total",
	2: "rpc_server_handled_seconds",
	3: "rpc_server_metrics_point_count",
}

var ServerMetrics_MetricName_value = map[string]int32{
	"rpc_server_started_total":       0,
	"rpc_server_handled_total":       1,
	"rpc_server_handled_seconds":     2,
	"rpc_server_metrics_point_count": 3,
}

func (x ServerMetrics_MetricName) String() string {
	return proto.EnumName(ServerMetrics_MetricName_name, int32(x))
}

func (ServerMetrics_MetricName) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_67943c9084134dd5, []int{1, 0}
}

type RPCLabels_FieldName int32

const (
	// 注意，字段名希望能保持原始名字，方便反射使用，所以枚举时不使用通常的命名规范。
	// 此处使用枚举，方便遍历，写代码时相对方便，减少重复代码。
	RPCLabels_caller_service   RPCLabels_FieldName = 0
	RPCLabels_caller_method    RPCLabels_FieldName = 1
	RPCLabels_caller_con_setid RPCLabels_FieldName = 2
	RPCLabels_caller_ip        RPCLabels_FieldName = 3
	RPCLabels_caller_container RPCLabels_FieldName = 4
	RPCLabels_callee_service   RPCLabels_FieldName = 5
	RPCLabels_callee_method    RPCLabels_FieldName = 6
	RPCLabels_callee_con_setid RPCLabels_FieldName = 7
	RPCLabels_callee_ip        RPCLabels_FieldName = 8
	RPCLabels_callee_container RPCLabels_FieldName = 9
	RPCLabels_code             RPCLabels_FieldName = 10
	RPCLabels_code_type        RPCLabels_FieldName = 11
	//    code_desc = 12;     //此字段已经废弃
	RPCLabels_caller_group  RPCLabels_FieldName = 13
	RPCLabels_user_ext1     RPCLabels_FieldName = 14
	RPCLabels_user_ext2     RPCLabels_FieldName = 15
	RPCLabels_user_ext3     RPCLabels_FieldName = 16
	RPCLabels_caller_target RPCLabels_FieldName = 17
	RPCLabels_caller_server RPCLabels_FieldName = 18
	RPCLabels_callee_target RPCLabels_FieldName = 19
	RPCLabels_callee_server RPCLabels_FieldName = 20
	// 金丝雀标签
	RPCLabels_canary RPCLabels_FieldName = 21
	// 流量标签，标记此流量是灰度、降级、重试等
	RPCLabels_flow_tag  RPCLabels_FieldName = 22
	RPCLabels_max_field RPCLabels_FieldName = 23
)

var RPCLabels_FieldName_name = map[int32]string{
	0:  "caller_service",
	1:  "caller_method",
	2:  "caller_con_setid",
	3:  "caller_ip",
	4:  "caller_container",
	5:  "callee_service",
	6:  "callee_method",
	7:  "callee_con_setid",
	8:  "callee_ip",
	9:  "callee_container",
	10: "code",
	11: "code_type",
	13: "caller_group",
	14: "user_ext1",
	15: "user_ext2",
	16: "user_ext3",
	17: "caller_target",
	18: "caller_server",
	19: "callee_target",
	20: "callee_server",
	21: "canary",
	22: "flow_tag",
	23: "max_field",
}

var RPCLabels_FieldName_value = map[string]int32{
	"caller_service":   0,
	"caller_method":    1,
	"caller_con_setid": 2,
	"caller_ip":        3,
	"caller_container": 4,
	"callee_service":   5,
	"callee_method":    6,
	"callee_con_setid": 7,
	"callee_ip":        8,
	"callee_container": 9,
	"code":             10,
	"code_type":        11,
	"caller_group":     13,
	"user_ext1":        14,
	"user_ext2":        15,
	"user_ext3":        16,
	"caller_target":    17,
	"caller_server":    18,
	"callee_target":    19,
	"callee_server":    20,
	"canary":           21,
	"flow_tag":         22,
	"max_field":        23,
}

func (x RPCLabels_FieldName) String() string {
	return proto.EnumName(RPCLabels_FieldName_name, int32(x))
}

func (RPCLabels_FieldName) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_67943c9084134dd5, []int{2, 0}
}

type NormalLabels_FieldName int32

const (
	// 注意，字段名希望能保持原始名字，方便反射使用，所以枚举时不使用通常的命名规范。
	// 此处使用枚举，方便遍历，写代码时相对方便，减少重复代码。
	// 新增字段时后台不需要变更代码，只需要更新协议发布即可。
	NormalLabels_target    NormalLabels_FieldName = 0
	NormalLabels_namespace NormalLabels_FieldName = 1
	NormalLabels_env_name  NormalLabels_FieldName = 2
	// region，历史原因，此字段实际是容器集群 (con_setid)
	NormalLabels_region         NormalLabels_FieldName = 3
	NormalLabels_instance       NormalLabels_FieldName = 4
	NormalLabels_node           NormalLabels_FieldName = 5
	NormalLabels_container_name NormalLabels_FieldName = 6
	NormalLabels_version        NormalLabels_FieldName = 7
	// 城市
	NormalLabels_city NormalLabels_FieldName = 8
	// SDK 名字
	NormalLabels_sdk_name NormalLabels_FieldName = 9
	// 发布版本，用于 CD 可观测
	NormalLabels_release_version NormalLabels_FieldName = 10
	// 组织 ID
	NormalLabels_organization_id NormalLabels_FieldName = 11
	NormalLabels_max_field       NormalLabels_FieldName = 12
)

var NormalLabels_FieldName_name = map[int32]string{
	0:  "target",
	1:  "namespace",
	2:  "env_name",
	3:  "region",
	4:  "instance",
	5:  "node",
	6:  "container_name",
	7:  "version",
	8:  "city",
	9:  "sdk_name",
	10: "release_version",
	11: "organization_id",
	12: "max_field",
}

var NormalLabels_FieldName_value = map[string]int32{
	"target":          0,
	"namespace":       1,
	"env_name":        2,
	"region":          3,
	"instance":        4,
	"node":            5,
	"container_name":  6,
	"version":         7,
	"city":            8,
	"sdk_name":        9,
	"release_version": 10,
	"organization_id": 11,
	"max_field":       12,
}

func (x NormalLabels_FieldName) String() string {
	return proto.EnumName(NormalLabels_FieldName_name, int32(x))
}

func (NormalLabels_FieldName) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_67943c9084134dd5, []int{3, 0}
}

// ClientMetrics 客户端 (主调方上报) 的指标。
type ClientMetrics struct {
	Metrics   []ClientMetrics_Metric `protobuf:"bytes,1,rep,name=metrics,proto3" json:"metrics"`
	RpcLabels RPCLabels              `protobuf:"bytes,2,opt,name=rpc_labels,json=rpcLabels,proto3" json:"rpc_labels"`
}

func (m *ClientMetrics) Reset()         { *m = ClientMetrics{} }
func (m *ClientMetrics) String() string { return proto.CompactTextString(m) }
func (*ClientMetrics) ProtoMessage()    {}
func (*ClientMetrics) Descriptor() ([]byte, []int) {
	return fileDescriptor_67943c9084134dd5, []int{0}
}
func (m *ClientMetrics) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClientMetrics) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClientMetrics.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClientMetrics) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientMetrics.Merge(m, src)
}
func (m *ClientMetrics) XXX_Size() int {
	return m.Size()
}
func (m *ClientMetrics) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientMetrics.DiscardUnknown(m)
}

var xxx_messageInfo_ClientMetrics proto.InternalMessageInfo

func (m *ClientMetrics) GetMetrics() []ClientMetrics_Metric {
	if m != nil {
		return m.Metrics
	}
	return nil
}

func (m *ClientMetrics) GetRpcLabels() RPCLabels {
	if m != nil {
		return m.RpcLabels
	}
	return RPCLabels{}
}

type ClientMetrics_Metric struct {
	Name        ClientMetrics_MetricName `protobuf:"varint,1,opt,name=name,proto3,enum=model.ClientMetrics_MetricName" json:"name,omitempty"`
	Value       float64                  `protobuf:"fixed64,2,opt,name=value,proto3" json:"value,omitempty"`
	Aggregation Aggregation              `protobuf:"varint,3,opt,name=aggregation,proto3,enum=model.Aggregation" json:"aggregation,omitempty"`
}

func (m *ClientMetrics_Metric) Reset()         { *m = ClientMetrics_Metric{} }
func (m *ClientMetrics_Metric) String() string { return proto.CompactTextString(m) }
func (*ClientMetrics_Metric) ProtoMessage()    {}
func (*ClientMetrics_Metric) Descriptor() ([]byte, []int) {
	return fileDescriptor_67943c9084134dd5, []int{0, 0}
}
func (m *ClientMetrics_Metric) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClientMetrics_Metric) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClientMetrics_Metric.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClientMetrics_Metric) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientMetrics_Metric.Merge(m, src)
}
func (m *ClientMetrics_Metric) XXX_Size() int {
	return m.Size()
}
func (m *ClientMetrics_Metric) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientMetrics_Metric.DiscardUnknown(m)
}

var xxx_messageInfo_ClientMetrics_Metric proto.InternalMessageInfo

func (m *ClientMetrics_Metric) GetName() ClientMetrics_MetricName {
	if m != nil {
		return m.Name
	}
	return ClientMetrics_rpc_client_started_total
}

func (m *ClientMetrics_Metric) GetValue() float64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *ClientMetrics_Metric) GetAggregation() Aggregation {
	if m != nil {
		return m.Aggregation
	}
	return Aggregation_AGGREGATION_NONE
}

// ServerMetrics 服务端（被调方）上报的指标。
type ServerMetrics struct {
	Metrics   []ServerMetrics_Metric `protobuf:"bytes,1,rep,name=metrics,proto3" json:"metrics"`
	RpcLabels RPCLabels              `protobuf:"bytes,2,opt,name=rpc_labels,json=rpcLabels,proto3" json:"rpc_labels"`
}

func (m *ServerMetrics) Reset()         { *m = ServerMetrics{} }
func (m *ServerMetrics) String() string { return proto.CompactTextString(m) }
func (*ServerMetrics) ProtoMessage()    {}
func (*ServerMetrics) Descriptor() ([]byte, []int) {
	return fileDescriptor_67943c9084134dd5, []int{1}
}
func (m *ServerMetrics) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ServerMetrics) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ServerMetrics.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ServerMetrics) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServerMetrics.Merge(m, src)
}
func (m *ServerMetrics) XXX_Size() int {
	return m.Size()
}
func (m *ServerMetrics) XXX_DiscardUnknown() {
	xxx_messageInfo_ServerMetrics.DiscardUnknown(m)
}

var xxx_messageInfo_ServerMetrics proto.InternalMessageInfo

func (m *ServerMetrics) GetMetrics() []ServerMetrics_Metric {
	if m != nil {
		return m.Metrics
	}
	return nil
}

func (m *ServerMetrics) GetRpcLabels() RPCLabels {
	if m != nil {
		return m.RpcLabels
	}
	return RPCLabels{}
}

type ServerMetrics_Metric struct {
	Name        ServerMetrics_MetricName `protobuf:"varint,1,opt,name=name,proto3,enum=model.ServerMetrics_MetricName" json:"name,omitempty"`
	Value       float64                  `protobuf:"fixed64,2,opt,name=value,proto3" json:"value,omitempty"`
	Aggregation Aggregation              `protobuf:"varint,3,opt,name=aggregation,proto3,enum=model.Aggregation" json:"aggregation,omitempty"`
}

func (m *ServerMetrics_Metric) Reset()         { *m = ServerMetrics_Metric{} }
func (m *ServerMetrics_Metric) String() string { return proto.CompactTextString(m) }
func (*ServerMetrics_Metric) ProtoMessage()    {}
func (*ServerMetrics_Metric) Descriptor() ([]byte, []int) {
	return fileDescriptor_67943c9084134dd5, []int{1, 0}
}
func (m *ServerMetrics_Metric) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ServerMetrics_Metric) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ServerMetrics_Metric.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ServerMetrics_Metric) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServerMetrics_Metric.Merge(m, src)
}
func (m *ServerMetrics_Metric) XXX_Size() int {
	return m.Size()
}
func (m *ServerMetrics_Metric) XXX_DiscardUnknown() {
	xxx_messageInfo_ServerMetrics_Metric.DiscardUnknown(m)
}

var xxx_messageInfo_ServerMetrics_Metric proto.InternalMessageInfo

func (m *ServerMetrics_Metric) GetName() ServerMetrics_MetricName {
	if m != nil {
		return m.Name
	}
	return ServerMetrics_rpc_server_started_total
}

func (m *ServerMetrics_Metric) GetValue() float64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *ServerMetrics_Metric) GetAggregation() Aggregation {
	if m != nil {
		return m.Aggregation
	}
	return Aggregation_AGGREGATION_NONE
}

// RPCLabels RPC 指标的标签。
type RPCLabels struct {
	Fields []RPCLabels_Field `protobuf:"bytes,1,rep,name=fields,proto3" json:"fields"`
}

func (m *RPCLabels) Reset()         { *m = RPCLabels{} }
func (m *RPCLabels) String() string { return proto.CompactTextString(m) }
func (*RPCLabels) ProtoMessage()    {}
func (*RPCLabels) Descriptor() ([]byte, []int) {
	return fileDescriptor_67943c9084134dd5, []int{2}
}
func (m *RPCLabels) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RPCLabels) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RPCLabels.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RPCLabels) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RPCLabels.Merge(m, src)
}
func (m *RPCLabels) XXX_Size() int {
	return m.Size()
}
func (m *RPCLabels) XXX_DiscardUnknown() {
	xxx_messageInfo_RPCLabels.DiscardUnknown(m)
}

var xxx_messageInfo_RPCLabels proto.InternalMessageInfo

func (m *RPCLabels) GetFields() []RPCLabels_Field {
	if m != nil {
		return m.Fields
	}
	return nil
}

type RPCLabels_Field struct {
	Name  RPCLabels_FieldName `protobuf:"varint,1,opt,name=name,proto3,enum=model.RPCLabels_FieldName" json:"name,omitempty"`
	Value string              `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *RPCLabels_Field) Reset()         { *m = RPCLabels_Field{} }
func (m *RPCLabels_Field) String() string { return proto.CompactTextString(m) }
func (*RPCLabels_Field) ProtoMessage()    {}
func (*RPCLabels_Field) Descriptor() ([]byte, []int) {
	return fileDescriptor_67943c9084134dd5, []int{2, 0}
}
func (m *RPCLabels_Field) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RPCLabels_Field) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RPCLabels_Field.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RPCLabels_Field) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RPCLabels_Field.Merge(m, src)
}
func (m *RPCLabels_Field) XXX_Size() int {
	return m.Size()
}
func (m *RPCLabels_Field) XXX_DiscardUnknown() {
	xxx_messageInfo_RPCLabels_Field.DiscardUnknown(m)
}

var xxx_messageInfo_RPCLabels_Field proto.InternalMessageInfo

func (m *RPCLabels_Field) GetName() RPCLabels_FieldName {
	if m != nil {
		return m.Name
	}
	return RPCLabels_caller_service
}

func (m *RPCLabels_Field) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// NormalLabels 一般监控都有的标签。
type NormalLabels struct {
	Fields []NormalLabels_Field `protobuf:"bytes,1,rep,name=fields,proto3" json:"fields"`
}

func (m *NormalLabels) Reset()         { *m = NormalLabels{} }
func (m *NormalLabels) String() string { return proto.CompactTextString(m) }
func (*NormalLabels) ProtoMessage()    {}
func (*NormalLabels) Descriptor() ([]byte, []int) {
	return fileDescriptor_67943c9084134dd5, []int{3}
}
func (m *NormalLabels) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NormalLabels) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NormalLabels.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NormalLabels) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NormalLabels.Merge(m, src)
}
func (m *NormalLabels) XXX_Size() int {
	return m.Size()
}
func (m *NormalLabels) XXX_DiscardUnknown() {
	xxx_messageInfo_NormalLabels.DiscardUnknown(m)
}

var xxx_messageInfo_NormalLabels proto.InternalMessageInfo

func (m *NormalLabels) GetFields() []NormalLabels_Field {
	if m != nil {
		return m.Fields
	}
	return nil
}

type NormalLabels_Field struct {
	Name  NormalLabels_FieldName `protobuf:"varint,1,opt,name=name,proto3,enum=model.NormalLabels_FieldName" json:"name,omitempty"`
	Value string                 `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *NormalLabels_Field) Reset()         { *m = NormalLabels_Field{} }
func (m *NormalLabels_Field) String() string { return proto.CompactTextString(m) }
func (*NormalLabels_Field) ProtoMessage()    {}
func (*NormalLabels_Field) Descriptor() ([]byte, []int) {
	return fileDescriptor_67943c9084134dd5, []int{3, 0}
}
func (m *NormalLabels_Field) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NormalLabels_Field) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NormalLabels_Field.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NormalLabels_Field) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NormalLabels_Field.Merge(m, src)
}
func (m *NormalLabels_Field) XXX_Size() int {
	return m.Size()
}
func (m *NormalLabels_Field) XXX_DiscardUnknown() {
	xxx_messageInfo_NormalLabels_Field.DiscardUnknown(m)
}

var xxx_messageInfo_NormalLabels_Field proto.InternalMessageInfo

func (m *NormalLabels_Field) GetName() NormalLabels_FieldName {
	if m != nil {
		return m.Name
	}
	return NormalLabels_target
}

func (m *NormalLabels_Field) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// NormalMetric 一般属性监控指标，无维度。
type NormalMetric struct {
	Metric Metric `protobuf:"bytes,1,opt,name=metric,proto3" json:"metric"`
}

func (m *NormalMetric) Reset()         { *m = NormalMetric{} }
func (m *NormalMetric) String() string { return proto.CompactTextString(m) }
func (*NormalMetric) ProtoMessage()    {}
func (*NormalMetric) Descriptor() ([]byte, []int) {
	return fileDescriptor_67943c9084134dd5, []int{4}
}
func (m *NormalMetric) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NormalMetric) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NormalMetric.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NormalMetric) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NormalMetric.Merge(m, src)
}
func (m *NormalMetric) XXX_Size() int {
	return m.Size()
}
func (m *NormalMetric) XXX_DiscardUnknown() {
	xxx_messageInfo_NormalMetric.DiscardUnknown(m)
}

var xxx_messageInfo_NormalMetric proto.InternalMessageInfo

func (m *NormalMetric) GetMetric() Metric {
	if m != nil {
		return m.Metric
	}
	return Metric{}
}

// Metric 指标
type Metric struct {
	Name        string      `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Value       float64     `protobuf:"fixed64,2,opt,name=value,proto3" json:"value,omitempty"`
	Aggregation Aggregation `protobuf:"varint,3,opt,name=aggregation,proto3,enum=model.Aggregation" json:"aggregation,omitempty"`
}

func (m *Metric) Reset()         { *m = Metric{} }
func (m *Metric) String() string { return proto.CompactTextString(m) }
func (*Metric) ProtoMessage()    {}
func (*Metric) Descriptor() ([]byte, []int) {
	return fileDescriptor_67943c9084134dd5, []int{5}
}
func (m *Metric) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Metric) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Metric.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Metric) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Metric.Merge(m, src)
}
func (m *Metric) XXX_Size() int {
	return m.Size()
}
func (m *Metric) XXX_DiscardUnknown() {
	xxx_messageInfo_Metric.DiscardUnknown(m)
}

var xxx_messageInfo_Metric proto.InternalMessageInfo

func (m *Metric) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Metric) GetValue() float64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *Metric) GetAggregation() Aggregation {
	if m != nil {
		return m.Aggregation
	}
	return Aggregation_AGGREGATION_NONE
}

// Label 标签
type Label struct {
	Name  string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *Label) Reset()         { *m = Label{} }
func (m *Label) String() string { return proto.CompactTextString(m) }
func (*Label) ProtoMessage()    {}
func (*Label) Descriptor() ([]byte, []int) {
	return fileDescriptor_67943c9084134dd5, []int{6}
}
func (m *Label) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Label) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Label.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Label) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Label.Merge(m, src)
}
func (m *Label) XXX_Size() int {
	return m.Size()
}
func (m *Label) XXX_DiscardUnknown() {
	xxx_messageInfo_Label.DiscardUnknown(m)
}

var xxx_messageInfo_Label proto.InternalMessageInfo

func (m *Label) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Label) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// CustomMetrics 自定义指标
type CustomMetrics struct {
	// 指标
	Metrics []Metric `protobuf:"bytes,1,rep,name=metrics,proto3" json:"metrics"`
	// CustomLabels 中的第一个字段是 _group，用来拼接出 007
	// 的监控项名，保持兼容性。007 监控项名为
	// metrics_name=pp_trc_$app.$server_$_group。 pp_trc_$app.$server_
	// 前缀由后台来拼接加上。使用下划线开头，避免与用户标签冲突。
	CustomLabels []Label `protobuf:"bytes,2,rep,name=custom_labels,json=customLabels,proto3" json:"custom_labels"`
	// 监控项名，原始值，未经 NameToIdentifier 编码。
	MonitorName string `protobuf:"bytes,3,opt,name=monitor_name,json=monitorName,proto3" json:"monitor_name,omitempty"`
}

func (m *CustomMetrics) Reset()         { *m = CustomMetrics{} }
func (m *CustomMetrics) String() string { return proto.CompactTextString(m) }
func (*CustomMetrics) ProtoMessage()    {}
func (*CustomMetrics) Descriptor() ([]byte, []int) {
	return fileDescriptor_67943c9084134dd5, []int{7}
}
func (m *CustomMetrics) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CustomMetrics) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CustomMetrics.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CustomMetrics) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CustomMetrics.Merge(m, src)
}
func (m *CustomMetrics) XXX_Size() int {
	return m.Size()
}
func (m *CustomMetrics) XXX_DiscardUnknown() {
	xxx_messageInfo_CustomMetrics.DiscardUnknown(m)
}

var xxx_messageInfo_CustomMetrics proto.InternalMessageInfo

func (m *CustomMetrics) GetMetrics() []Metric {
	if m != nil {
		return m.Metrics
	}
	return nil
}

func (m *CustomMetrics) GetCustomLabels() []Label {
	if m != nil {
		return m.CustomLabels
	}
	return nil
}

func (m *CustomMetrics) GetMonitorName() string {
	if m != nil {
		return m.MonitorName
	}
	return ""
}

func init() {
	proto.RegisterEnum("model.Aggregation", Aggregation_name, Aggregation_value)
	proto.RegisterEnum("model.ClientMetrics_MetricName", ClientMetrics_MetricName_name, ClientMetrics_MetricName_value)
	proto.RegisterEnum("model.ServerMetrics_MetricName", ServerMetrics_MetricName_name, ServerMetrics_MetricName_value)
	proto.RegisterEnum("model.RPCLabels_FieldName", RPCLabels_FieldName_name, RPCLabels_FieldName_value)
	proto.RegisterEnum("model.NormalLabels_FieldName", NormalLabels_FieldName_name, NormalLabels_FieldName_value)
	proto.RegisterType((*ClientMetrics)(nil), "model.ClientMetrics")
	proto.RegisterType((*ClientMetrics_Metric)(nil), "model.ClientMetrics.Metric")
	proto.RegisterType((*ServerMetrics)(nil), "model.ServerMetrics")
	proto.RegisterType((*ServerMetrics_Metric)(nil), "model.ServerMetrics.Metric")
	proto.RegisterType((*RPCLabels)(nil), "model.RPCLabels")
	proto.RegisterType((*RPCLabels_Field)(nil), "model.RPCLabels.Field")
	proto.RegisterType((*NormalLabels)(nil), "model.NormalLabels")
	proto.RegisterType((*NormalLabels_Field)(nil), "model.NormalLabels.Field")
	proto.RegisterType((*NormalMetric)(nil), "model.NormalMetric")
	proto.RegisterType((*Metric)(nil), "model.Metric")
	proto.RegisterType((*Label)(nil), "model.Label")
	proto.RegisterType((*CustomMetrics)(nil), "model.CustomMetrics")
}

func init() { proto.RegisterFile("omp.proto", fileDescriptor_67943c9084134dd5) }

var fileDescriptor_67943c9084134dd5 = []byte{
	// 988 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x56, 0x4f, 0x6f, 0x1b, 0x45,
	0x14, 0xf7, 0xfa, 0x5f, 0xb2, 0xcf, 0x76, 0x3b, 0x9d, 0xa4, 0x6d, 0x12, 0xc0, 0x0d, 0x16, 0x87,
	0x08, 0x84, 0x51, 0x92, 0xa2, 0x4a, 0xf4, 0xe4, 0x46, 0xc6, 0x8d, 0x84, 0xed, 0x68, 0xe3, 0xa0,
	0x8a, 0xcb, 0x6a, 0xba, 0xfb, 0xba, 0x59, 0xb1, 0xbb, 0x63, 0xed, 0x8e, 0x4d, 0xc3, 0x37, 0x40,
	0xe2, 0xc0, 0x19, 0x21, 0xf8, 0x08, 0x7c, 0x8d, 0x8a, 0x53, 0x8f, 0x9c, 0x10, 0x4a, 0x24, 0x3e,
	0x07, 0x9a, 0xd9, 0xf1, 0x66, 0xed, 0xd8, 0xe4, 0x44, 0x4f, 0xf6, 0xfc, 0xde, 0xef, 0xcd, 0x9b,
	0xf7, 0xfb, 0x3d, 0xcf, 0x18, 0x4c, 0x1e, 0x8e, 0xdb, 0xe3, 0x98, 0x0b, 0x4e, 0x2b, 0x21, 0x77,
	0x31, 0xd8, 0xd9, 0xf4, 0xb8, 0xc7, 0x15, 0xf2, 0x99, 0xfc, 0x96, 0x06, 0x5b, 0xbf, 0x96, 0xa0,
	0x71, 0x14, 0xf8, 0x18, 0x89, 0x3e, 0x8a, 0xd8, 0x77, 0x12, 0xfa, 0x14, 0xd6, 0xc2, 0xf4, 0xeb,
	0x96, 0xb1, 0x5b, 0xda, 0xab, 0x1d, 0xbc, 0xd7, 0x56, 0x1b, 0xb4, 0xe7, 0x68, 0xed, 0xf4, 0xf3,
	0x59, 0xf9, 0xcd, 0x5f, 0x8f, 0x0a, 0xd6, 0x2c, 0x83, 0x7e, 0x0e, 0x10, 0x8f, 0x1d, 0x3b, 0x60,
	0x2f, 0x31, 0x48, 0xb6, 0x8a, 0xbb, 0xc6, 0x5e, 0xed, 0x80, 0xe8, 0x7c, 0xeb, 0xe4, 0xe8, 0x2b,
	0x85, 0xeb, 0x24, 0x33, 0x1e, 0x3b, 0x29, 0xb0, 0xf3, 0x83, 0x01, 0xd5, 0x74, 0x43, 0x7a, 0x08,
	0xe5, 0x88, 0x85, 0xb8, 0x65, 0xec, 0x1a, 0x7b, 0x77, 0x0e, 0x1e, 0xfd, 0x47, 0xed, 0x01, 0x0b,
	0xd1, 0x52, 0x64, 0xba, 0x09, 0x95, 0x29, 0x0b, 0x26, 0xa8, 0x2a, 0x1a, 0x56, 0xba, 0xa0, 0x8f,
	0xa1, 0xc6, 0x3c, 0x2f, 0x46, 0x8f, 0x09, 0x9f, 0x47, 0x5b, 0x25, 0xb5, 0x23, 0xd5, 0x3b, 0x76,
	0xae, 0x23, 0x56, 0x9e, 0xd6, 0xfa, 0xd1, 0x00, 0xb8, 0x2e, 0x40, 0xdf, 0x87, 0x2d, 0xd9, 0x91,
	0xa3, 0x0e, 0x60, 0x27, 0x82, 0xc5, 0x02, 0x5d, 0x5b, 0x70, 0xc1, 0x02, 0x52, 0x58, 0x88, 0x9e,
	0xb3, 0xc8, 0x0d, 0xb2, 0xa8, 0x41, 0x9b, 0xb0, 0xb3, 0x24, 0x9a, 0xa0, 0xc3, 0x23, 0x37, 0x21,
	0x45, 0xda, 0x82, 0x66, 0x2e, 0xae, 0x35, 0xb4, 0xc7, 0xdc, 0x8f, 0x84, 0xed, 0xf0, 0x49, 0x24,
	0x48, 0x49, 0x19, 0x74, 0x8a, 0xf1, 0x14, 0xe3, 0x5b, 0x0d, 0x9a, 0xa3, 0xbd, 0x63, 0x83, 0x96,
	0xd5, 0x7e, 0xa7, 0x06, 0x25, 0xea, 0x00, 0xab, 0x0c, 0xd2, 0xd1, 0x15, 0x06, 0x2d, 0x44, 0x6f,
	0x18, 0xa4, 0xe3, 0xcb, 0x0d, 0xfa, 0xbd, 0x0c, 0x66, 0xa6, 0x1c, 0x7d, 0x0c, 0xd5, 0x57, 0x3e,
	0x06, 0xee, 0xcc, 0x9b, 0x07, 0x8b, 0xda, 0xb6, 0xbf, 0x94, 0x61, 0xad, 0xb0, 0xe6, 0xee, 0xf4,
	0xa1, 0xa2, 0x60, 0xda, 0x9e, 0x13, 0x77, 0x67, 0x79, 0xf2, 0x2a, 0x5d, 0x4d, 0xad, 0x6b, 0xeb,
	0x97, 0x12, 0x98, 0x19, 0x93, 0x52, 0xb8, 0xe3, 0xb0, 0x20, 0x90, 0xe2, 0x60, 0x3c, 0xf5, 0x1d,
	0x24, 0x05, 0x7a, 0x0f, 0x1a, 0x1a, 0x0b, 0x51, 0x9c, 0x73, 0x97, 0x18, 0x74, 0x13, 0x88, 0x86,
	0x1c, 0x1e, 0xd9, 0x09, 0x0a, 0xdf, 0x25, 0x45, 0xda, 0x00, 0x53, 0xa3, 0xfe, 0x98, 0x94, 0xe6,
	0x49, 0x82, 0xf9, 0x11, 0xc6, 0xa4, 0x9c, 0x55, 0xc0, 0xac, 0x42, 0x25, 0xab, 0x80, 0xb3, 0x0a,
	0xd5, 0x2c, 0x19, 0x73, 0x15, 0xd6, 0xb2, 0x0a, 0x28, 0x2b, 0xac, 0xcf, 0x93, 0x74, 0x05, 0x93,
	0xae, 0x43, 0xd9, 0xe1, 0x2e, 0x12, 0x50, 0x74, 0xee, 0xa2, 0x2d, 0x2e, 0xc6, 0x48, 0x6a, 0x94,
	0x40, 0x5d, 0x1f, 0xc8, 0x8b, 0xf9, 0x64, 0x4c, 0x1a, 0x92, 0x30, 0x49, 0x30, 0xb6, 0xf1, 0xb5,
	0xd8, 0x27, 0x77, 0xf2, 0xcb, 0x03, 0x72, 0x37, 0xbf, 0x3c, 0x24, 0x24, 0xa7, 0x83, 0x60, 0xb1,
	0x87, 0x82, 0xdc, 0xcb, 0x41, 0xa9, 0xed, 0x84, 0xe6, 0x7a, 0xd1, 0xac, 0x8d, 0x1c, 0xa4, 0x59,
	0x9b, 0x14, 0xa0, 0xea, 0xb0, 0x88, 0xc5, 0x17, 0xe4, 0x3e, 0xad, 0xc3, 0xfa, 0xab, 0x80, 0x7f,
	0x67, 0x0b, 0xe6, 0x91, 0x07, 0xb2, 0x68, 0xc8, 0x5e, 0xdb, 0xca, 0x6c, 0xf2, 0xb0, 0xf5, 0x4f,
	0x11, 0xea, 0x03, 0x1e, 0x87, 0x2c, 0xd0, 0x43, 0xf3, 0x64, 0x61, 0x68, 0xb6, 0xb5, 0xef, 0x79,
	0xd2, 0xd2, 0xb9, 0x39, 0x99, 0xcd, 0xcd, 0xfe, 0xdc, 0xdc, 0x7c, 0xb0, 0x32, 0xff, 0xd6, 0xd1,
	0xf9, 0xc3, 0xc8, 0x8f, 0x0e, 0x40, 0x55, 0x77, 0x5c, 0x90, 0x4d, 0xc8, 0xbc, 0x64, 0xcc, 0x1c,
	0x24, 0x86, 0xec, 0x10, 0xa3, 0xa9, 0x2d, 0x21, 0x52, 0x94, 0xc4, 0x18, 0x3d, 0x9f, 0x47, 0xa4,
	0x24, 0x23, 0x7e, 0x94, 0x08, 0x16, 0x39, 0x48, 0xca, 0xd2, 0xb9, 0x48, 0x3a, 0x57, 0x51, 0x53,
	0x32, 0xb3, 0x34, 0xcd, 0xab, 0xd2, 0x1a, 0xac, 0x4d, 0x31, 0x4e, 0x64, 0xe2, 0x9a, 0x32, 0xd9,
	0x17, 0x17, 0x64, 0x5d, 0x6e, 0x91, 0xb8, 0xdf, 0xa6, 0x24, 0x93, 0x6e, 0xc0, 0xdd, 0x18, 0x03,
	0x64, 0x09, 0xda, 0x33, 0x32, 0x48, 0x90, 0xc7, 0x1e, 0x8b, 0xfc, 0xef, 0xd5, 0xad, 0x60, 0xfb,
	0x2e, 0xa9, 0xcd, 0x0b, 0x5d, 0x6f, 0x3d, 0x9d, 0xe9, 0xac, 0xaf, 0xae, 0x4f, 0xa0, 0x9a, 0xfe,
	0x86, 0x95, 0x4e, 0xb5, 0x83, 0x86, 0xd6, 0x69, 0xee, 0xaa, 0xd4, 0x94, 0xd6, 0x79, 0x76, 0xe3,
	0xd1, 0x9c, 0xb8, 0xe6, 0xff, 0x70, 0xa1, 0xed, 0x43, 0x45, 0x79, 0x74, 0x7b, 0xa1, 0xcc, 0xa6,
	0x9f, 0x0d, 0x68, 0x1c, 0x4d, 0x12, 0xc1, 0xc3, 0xd9, 0xab, 0xf0, 0xe9, 0xe2, 0xab, 0xb0, 0xb4,
	0xb9, 0xec, 0x1d, 0x78, 0x02, 0x0d, 0x47, 0xe5, 0x5f, 0x3f, 0x05, 0x32, 0xa9, 0xae, 0x93, 0xd4,
	0x79, 0x74, 0x4e, 0x3d, 0x25, 0xea, 0x59, 0xfd, 0x10, 0xea, 0x21, 0x8f, 0x7c, 0xc1, 0x53, 0x0f,
	0x55, 0x8f, 0xa6, 0x55, 0xd3, 0x98, 0x9c, 0x9a, 0x8f, 0x7f, 0x2b, 0x42, 0x2d, 0xd7, 0xac, 0xfc,
	0x49, 0x77, 0x7a, 0x3d, 0xab, 0xdb, 0xeb, 0x8c, 0x8e, 0x87, 0x03, 0x7b, 0x30, 0x1c, 0x74, 0x49,
	0x41, 0x1a, 0x98, 0x47, 0x4f, 0xbb, 0x23, 0x62, 0xdc, 0x00, 0xcf, 0xfa, 0xa4, 0xb8, 0x08, 0x76,
	0xbe, 0xee, 0x91, 0xd2, 0x22, 0xd8, 0xef, 0xbc, 0x20, 0xe5, 0x1b, 0xe0, 0xf1, 0x80, 0x54, 0xe8,
	0x36, 0xdc, 0xcf, 0x83, 0xcf, 0x8f, 0x4f, 0x47, 0xc3, 0x9e, 0xd5, 0xe9, 0x93, 0x2a, 0x7d, 0x08,
	0x1b, 0xf9, 0xd0, 0xd1, 0xf0, 0x6c, 0x30, 0xea, 0x5a, 0x64, 0x8d, 0x7e, 0x04, 0xbb, 0xf9, 0xc0,
	0x89, 0x35, 0xec, 0x77, 0x47, 0xcf, 0xbb, 0x67, 0xa7, 0xb9, 0xf4, 0x75, 0xf9, 0x3c, 0xac, 0x60,
	0xcd, 0x76, 0x52, 0xc3, 0xdb, 0xef, 0xbc, 0xb0, 0x73, 0x3c, 0x02, 0xcf, 0xbe, 0x78, 0x73, 0xd9,
	0x34, 0xde, 0x5e, 0x36, 0x8d, 0xbf, 0x2f, 0x9b, 0xc6, 0x4f, 0x57, 0xcd, 0xc2, 0xdb, 0xab, 0x66,
	0xe1, 0xcf, 0xab, 0x66, 0x01, 0xb6, 0x1d, 0x1e, 0xb6, 0x05, 0x46, 0x0e, 0x46, 0xa2, 0xed, 0xb1,
	0xc0, 0x0f, 0x50, 0xff, 0x55, 0xfb, 0x26, 0xfd, 0x1f, 0xf7, 0xb2, 0xaa, 0x56, 0x87, 0xff, 0x06,
	0x00, 0x00, 0xff, 0xff, 0xe3, 0x2e, 0x06, 0x05, 0xe2, 0x09, 0x00, 0x00,
}

func (m *ClientMetrics) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClientMetrics) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClientMetrics) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.RpcLabels.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintOmp(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Metrics) > 0 {
		for iNdEx := len(m.Metrics) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Metrics[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintOmp(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ClientMetrics_Metric) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClientMetrics_Metric) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClientMetrics_Metric) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Aggregation != 0 {
		i = encodeVarintOmp(dAtA, i, uint64(m.Aggregation))
		i--
		dAtA[i] = 0x18
	}
	if m.Value != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Value))))
		i--
		dAtA[i] = 0x11
	}
	if m.Name != 0 {
		i = encodeVarintOmp(dAtA, i, uint64(m.Name))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ServerMetrics) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServerMetrics) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServerMetrics) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.RpcLabels.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintOmp(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Metrics) > 0 {
		for iNdEx := len(m.Metrics) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Metrics[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintOmp(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ServerMetrics_Metric) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServerMetrics_Metric) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServerMetrics_Metric) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Aggregation != 0 {
		i = encodeVarintOmp(dAtA, i, uint64(m.Aggregation))
		i--
		dAtA[i] = 0x18
	}
	if m.Value != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Value))))
		i--
		dAtA[i] = 0x11
	}
	if m.Name != 0 {
		i = encodeVarintOmp(dAtA, i, uint64(m.Name))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RPCLabels) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RPCLabels) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RPCLabels) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Fields) > 0 {
		for iNdEx := len(m.Fields) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Fields[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintOmp(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *RPCLabels_Field) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RPCLabels_Field) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RPCLabels_Field) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintOmp(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x12
	}
	if m.Name != 0 {
		i = encodeVarintOmp(dAtA, i, uint64(m.Name))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NormalLabels) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NormalLabels) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NormalLabels) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Fields) > 0 {
		for iNdEx := len(m.Fields) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Fields[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintOmp(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *NormalLabels_Field) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NormalLabels_Field) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NormalLabels_Field) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintOmp(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x12
	}
	if m.Name != 0 {
		i = encodeVarintOmp(dAtA, i, uint64(m.Name))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NormalMetric) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NormalMetric) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NormalMetric) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Metric.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintOmp(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *Metric) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Metric) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Metric) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Aggregation != 0 {
		i = encodeVarintOmp(dAtA, i, uint64(m.Aggregation))
		i--
		dAtA[i] = 0x18
	}
	if m.Value != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Value))))
		i--
		dAtA[i] = 0x11
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintOmp(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Label) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Label) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Label) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintOmp(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintOmp(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CustomMetrics) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CustomMetrics) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CustomMetrics) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MonitorName) > 0 {
		i -= len(m.MonitorName)
		copy(dAtA[i:], m.MonitorName)
		i = encodeVarintOmp(dAtA, i, uint64(len(m.MonitorName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.CustomLabels) > 0 {
		for iNdEx := len(m.CustomLabels) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CustomLabels[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintOmp(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Metrics) > 0 {
		for iNdEx := len(m.Metrics) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Metrics[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintOmp(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintOmp(dAtA []byte, offset int, v uint64) int {
	offset -= sovOmp(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ClientMetrics) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Metrics) > 0 {
		for _, e := range m.Metrics {
			l = e.Size()
			n += 1 + l + sovOmp(uint64(l))
		}
	}
	l = m.RpcLabels.Size()
	n += 1 + l + sovOmp(uint64(l))
	return n
}

func (m *ClientMetrics_Metric) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Name != 0 {
		n += 1 + sovOmp(uint64(m.Name))
	}
	if m.Value != 0 {
		n += 9
	}
	if m.Aggregation != 0 {
		n += 1 + sovOmp(uint64(m.Aggregation))
	}
	return n
}

func (m *ServerMetrics) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Metrics) > 0 {
		for _, e := range m.Metrics {
			l = e.Size()
			n += 1 + l + sovOmp(uint64(l))
		}
	}
	l = m.RpcLabels.Size()
	n += 1 + l + sovOmp(uint64(l))
	return n
}

func (m *ServerMetrics_Metric) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Name != 0 {
		n += 1 + sovOmp(uint64(m.Name))
	}
	if m.Value != 0 {
		n += 9
	}
	if m.Aggregation != 0 {
		n += 1 + sovOmp(uint64(m.Aggregation))
	}
	return n
}

func (m *RPCLabels) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Fields) > 0 {
		for _, e := range m.Fields {
			l = e.Size()
			n += 1 + l + sovOmp(uint64(l))
		}
	}
	return n
}

func (m *RPCLabels_Field) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Name != 0 {
		n += 1 + sovOmp(uint64(m.Name))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovOmp(uint64(l))
	}
	return n
}

func (m *NormalLabels) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Fields) > 0 {
		for _, e := range m.Fields {
			l = e.Size()
			n += 1 + l + sovOmp(uint64(l))
		}
	}
	return n
}

func (m *NormalLabels_Field) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Name != 0 {
		n += 1 + sovOmp(uint64(m.Name))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovOmp(uint64(l))
	}
	return n
}

func (m *NormalMetric) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Metric.Size()
	n += 1 + l + sovOmp(uint64(l))
	return n
}

func (m *Metric) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovOmp(uint64(l))
	}
	if m.Value != 0 {
		n += 9
	}
	if m.Aggregation != 0 {
		n += 1 + sovOmp(uint64(m.Aggregation))
	}
	return n
}

func (m *Label) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovOmp(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovOmp(uint64(l))
	}
	return n
}

func (m *CustomMetrics) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Metrics) > 0 {
		for _, e := range m.Metrics {
			l = e.Size()
			n += 1 + l + sovOmp(uint64(l))
		}
	}
	if len(m.CustomLabels) > 0 {
		for _, e := range m.CustomLabels {
			l = e.Size()
			n += 1 + l + sovOmp(uint64(l))
		}
	}
	l = len(m.MonitorName)
	if l > 0 {
		n += 1 + l + sovOmp(uint64(l))
	}
	return n
}

func sovOmp(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozOmp(x uint64) (n int) {
	return sovOmp(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ClientMetrics) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOmp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClientMetrics: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClientMetrics: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metrics", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOmp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOmp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Metrics = append(m.Metrics, ClientMetrics_Metric{})
			if err := m.Metrics[len(m.Metrics)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RpcLabels", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOmp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOmp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RpcLabels.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOmp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOmp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClientMetrics_Metric) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOmp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Metric: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Metric: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			m.Name = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Name |= ClientMetrics_MetricName(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Value = float64(math.Float64frombits(v))
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aggregation", wireType)
			}
			m.Aggregation = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Aggregation |= Aggregation(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOmp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOmp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServerMetrics) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOmp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServerMetrics: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServerMetrics: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metrics", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOmp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOmp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Metrics = append(m.Metrics, ServerMetrics_Metric{})
			if err := m.Metrics[len(m.Metrics)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RpcLabels", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOmp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOmp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RpcLabels.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOmp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOmp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServerMetrics_Metric) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOmp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Metric: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Metric: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			m.Name = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Name |= ServerMetrics_MetricName(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Value = float64(math.Float64frombits(v))
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aggregation", wireType)
			}
			m.Aggregation = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Aggregation |= Aggregation(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOmp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOmp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RPCLabels) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOmp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RPCLabels: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RPCLabels: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fields", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOmp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOmp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fields = append(m.Fields, RPCLabels_Field{})
			if err := m.Fields[len(m.Fields)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOmp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOmp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RPCLabels_Field) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOmp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Field: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Field: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			m.Name = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Name |= RPCLabels_FieldName(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmp
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOmp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOmp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NormalLabels) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOmp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NormalLabels: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NormalLabels: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fields", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOmp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOmp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fields = append(m.Fields, NormalLabels_Field{})
			if err := m.Fields[len(m.Fields)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOmp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOmp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NormalLabels_Field) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOmp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Field: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Field: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			m.Name = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Name |= NormalLabels_FieldName(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmp
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOmp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOmp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NormalMetric) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOmp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NormalMetric: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NormalMetric: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metric", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOmp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOmp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Metric.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOmp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOmp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Metric) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOmp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Metric: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Metric: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmp
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Value = float64(math.Float64frombits(v))
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aggregation", wireType)
			}
			m.Aggregation = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Aggregation |= Aggregation(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOmp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOmp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Label) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOmp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Label: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Label: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmp
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmp
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOmp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOmp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CustomMetrics) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOmp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CustomMetrics: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CustomMetrics: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metrics", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOmp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOmp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Metrics = append(m.Metrics, Metric{})
			if err := m.Metrics[len(m.Metrics)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomLabels", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOmp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOmp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CustomLabels = append(m.CustomLabels, Label{})
			if err := m.CustomLabels[len(m.CustomLabels)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MonitorName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOmp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOmp
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOmp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MonitorName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOmp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOmp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipOmp(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowOmp
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOmp
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOmp
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthOmp
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupOmp
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthOmp
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthOmp        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowOmp          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupOmp = fmt.Errorf("proto: unexpected end of group")
)
